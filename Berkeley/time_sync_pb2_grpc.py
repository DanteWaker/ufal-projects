# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import time_sync_pb2 as time__sync__pb2


class TimeSyncServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterClient = channel.unary_unary(
                '/timesync.TimeSyncService/RegisterClient',
                request_serializer=time__sync__pb2.RegisterClientRequest.SerializeToString,
                response_deserializer=time__sync__pb2.Empty.FromString,
                )
        self.RequestClientTime = channel.unary_unary(
                '/timesync.TimeSyncService/RequestClientTime',
                request_serializer=time__sync__pb2.Empty.SerializeToString,
                response_deserializer=time__sync__pb2.ClientTimeResponse.FromString,
                )
        self.AdjustClientTime = channel.unary_unary(
                '/timesync.TimeSyncService/AdjustClientTime',
                request_serializer=time__sync__pb2.TimeAdjustment.SerializeToString,
                response_deserializer=time__sync__pb2.Empty.FromString,
                )
        self.StreamTimeUpdates = channel.unary_stream(
                '/timesync.TimeSyncService/StreamTimeUpdates',
                request_serializer=time__sync__pb2.Empty.SerializeToString,
                response_deserializer=time__sync__pb2.TimeUpdate.FromString,
                )


class TimeSyncServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestClientTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdjustClientTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTimeUpdates(self, request, context):
        """Novo m√©todo RPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TimeSyncServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterClient': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterClient,
                    request_deserializer=time__sync__pb2.RegisterClientRequest.FromString,
                    response_serializer=time__sync__pb2.Empty.SerializeToString,
            ),
            'RequestClientTime': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestClientTime,
                    request_deserializer=time__sync__pb2.Empty.FromString,
                    response_serializer=time__sync__pb2.ClientTimeResponse.SerializeToString,
            ),
            'AdjustClientTime': grpc.unary_unary_rpc_method_handler(
                    servicer.AdjustClientTime,
                    request_deserializer=time__sync__pb2.TimeAdjustment.FromString,
                    response_serializer=time__sync__pb2.Empty.SerializeToString,
            ),
            'StreamTimeUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamTimeUpdates,
                    request_deserializer=time__sync__pb2.Empty.FromString,
                    response_serializer=time__sync__pb2.TimeUpdate.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'timesync.TimeSyncService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TimeSyncService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/timesync.TimeSyncService/RegisterClient',
            time__sync__pb2.RegisterClientRequest.SerializeToString,
            time__sync__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestClientTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/timesync.TimeSyncService/RequestClientTime',
            time__sync__pb2.Empty.SerializeToString,
            time__sync__pb2.ClientTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdjustClientTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/timesync.TimeSyncService/AdjustClientTime',
            time__sync__pb2.TimeAdjustment.SerializeToString,
            time__sync__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamTimeUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/timesync.TimeSyncService/StreamTimeUpdates',
            time__sync__pb2.Empty.SerializeToString,
            time__sync__pb2.TimeUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
